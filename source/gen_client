#!/bin/bash
CLIENT=$1
if [ ! $CLIENT ]; then
  echo -n "please input client name[client1]:"
  read CLIENT
  if [ ! $CLIENT ]; then
    CLIENT=client1
  fi
fi
echo -n "server's ip or domain[vpn.mydomain]:"
read DOMAIN
if [ ! $DOMAIN ]; then
  DOMAIN="vpn.mydomain"
fi

PWD0=$(pwd)
cd /etc/openvpn/easy-rsa
if [ ! -d keys ] || [ ! -s keys/ca.crt ]; then
  echo "you should build the CA before .." && exit
fi

cd keys
if [ -s $CLIENT.tar.gz ]; then
  echo "$CLIENT's certs already exists .." && cp $CLIENT.tar.gz $PWD0 && exit
else
  rm -rf $CLIENT.*
  cd /etc/openvpn/easy-rsa && \
  source vars && \
  ./build-key $CLIENT
fi


echo "create $CLIENT.conf .."
cd /etc/openvpn
tmp=$(grep ^proto server.conf)
if [[ $tmp ]]; then
  tmp=${tmp#* }
  PROTO=${tmp%% *}
else
  echo "protocol of vpn server not set .. " && exit
fi
tmp=$(grep ^port server.conf)
if [[ $tmp ]]; then
  tmp=${tmp#* }
  PORT=${tmp%% *}
else
  echo "port of vpn server not set .." && exit
fi
tmp=$(grep ^dev server.conf)
if [[ $tmp ]]; then
  tmp=${tmp#* }
  DEV=${tmp%% *}
else
  echo "dev tun/tap config isn't right .." && exit
fi
tmp=$(grep ^tls-auth server.conf)
if [[ $tmp ]]; then
  tmp=${tmp#* }         # delete the left
  TLS_AUTH=${tmp%% *}   # delete the right
fi

echo "
client
nobind
dev $DEV
proto $PROTO
remote $DOMAIN $PORT
remote-cert-tls server
cipher AES-256-CBC
key-direction 1
auth-nocache
comp-lzo
verb 3
ca ca.crt
cert $CLIENT.crt
key $CLIENT.key" > /etc/openvpn/easy-rsa/keys/$CLIENT.conf
if [[ $TLS_AUTH ]]; then
  cp -rf $TLS_AUTH /etc/openvpn/easy-rsa/keys/
  TLS_AUTH=${TLS_AUTH##*/}    # in case multi-level dir
  echo "tls-auth $TLS_AUTH 1" >> /etc/openvpn/easy-rsa/keys/$CLIENT.conf
fi


echo "create $CLIENT.ovpn .."
cd /etc/openvpn/easy-rsa/keys
echo "
client
nobind
dev $DEV
remote $DOMAIN $PORT $PROTO
remote-cert-tls server
cipher AES-256-CBC
key-direction 1
auth-nocache
comp-lzo
verb 3
<ca>
$(cat ca.crt)
</ca>
<cert>
$(cat $CLIENT.crt)
</cert>
<key>
$(cat $CLIENT.key)
</key>" > $CLIENT.ovpn
if [[ $TLS_AUTH ]]; then
  echo "<tls-auth>
$(cat $TLS_AUTH)
</tls-auth>" >> $CLIENT.ovpn
fi


echo "copy files .."
rm $CLIENT.csr
tar czvf $CLIENT.tar.gz ca.crt $CLIENT.* $TLS_AUTH > /dev/null
rm $CLIENT.crt $CLIENT.key $CLIENT.conf $CLIENT.ovpn
cp $CLIENT.tar.gz $PWD0

echo "done .."
